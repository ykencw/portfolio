{"version":3,"sources":["frontend/common/images/backgroundhome.jpg","frontend/common/images sync /^/.*/.svg$","frontend/common/images/aboutmeicon.svg","frontend/common/images/contacticon.svg","frontend/common/images/homeicon.svg","frontend/common/images/menuicon.svg","frontend/common/images/projectsicon.svg","frontend/common/images/backgroundprojects.jpg","frontend/Home.js","frontend/NotFound.js","frontend/NavLink.js","frontend/NavBar.js","frontend/Projects.js","frontend/App.js","frontend/serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","map","./aboutmeicon.svg","./contacticon.svg","./homeicon.svg","./menuicon.svg","./projectsicon.svg","webpackContext","req","id","webpackContextResolve","o","e","Error","code","keys","Object","resolve","Home","react_default","a","createElement","className","style","backgroundImage","concat","require","NotFound","Fragment","react_router_dom","to","NavLink","_ref","route","iconName","linkName","clickHandler","onClick","src","alt","NavBar","src_frontend_NavLink","Projects","App","react_router","exact","path","component","render","src_frontend_NavBar","React","Component","Boolean","window","location","hostname","match","ReactDOM","basename","process","src_frontend_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cfc81bab.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/backgroundhome.ca9ac795.jpg\";","var map = {\n\t\"./aboutmeicon.svg\": 40,\n\t\"./contacticon.svg\": 41,\n\t\"./homeicon.svg\": 42,\n\t\"./menuicon.svg\": 43,\n\t\"./projectsicon.svg\": 44\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 39;","module.exports = __webpack_public_path__ + \"static/media/aboutmeicon.d9fb9546.svg\";","module.exports = __webpack_public_path__ + \"static/media/contacticon.a613092c.svg\";","module.exports = __webpack_public_path__ + \"static/media/homeicon.56c67139.svg\";","module.exports = __webpack_public_path__ + \"static/media/menuicon.f4747b89.svg\";","module.exports = __webpack_public_path__ + \"static/media/projectsicon.32b05299.svg\";","module.exports = __webpack_public_path__ + \"static/media/backgroundprojects.7459bc3a.jpg\";","import React from 'react';\r\n\r\nimport './Home.css';\r\n\r\nconst Home = () => {\r\n    return(<div>\r\n        <div className='TopBar' style={\r\n            {backgroundImage: `url(${require(`./common/images/backgroundhome.jpg`)})`}\r\n        }>\r\n            <div className='TopBarOverlay'>\r\n                <h1>The Home Page</h1>\r\n            </div>\r\n        </div>\r\n        <div className='Content'>\r\n            <h1>Home:</h1>\r\n            <div>\r\n                This is the home, blah blah home\r\n            </div>\r\n        </div>\r\n    </div>);\r\n}\r\n\r\nexport default Home;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst NotFound = () => {\r\n    return (<>\r\n        <h1>Ooops, it looks like this page doesn't exist!</h1>\r\n        <Link to='/'><h1>Back to homepage!</h1></Link>\r\n    </>);\r\n}\r\n\r\nexport default NotFound;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport './NavLink.css';\r\n\r\nconst NavLink = ({route, iconName, linkName, clickHandler}) => {\r\n    return (<Link className='NavLink' to={route} onClick={clickHandler}>\r\n        <img className='icon' src={require(`./common/images/${iconName}.svg`)} alt={`${linkName} icon`} />\r\n        <div className='linkName'>{linkName}</div>\r\n    </Link>);\r\n}\r\n\r\nexport default NavLink;","import React from 'react';\r\nimport NavLink from './NavLink';\r\n\r\nimport './NavBar.css';\r\n\r\nconst NavBar = () => {\r\n    return (<div className='NavBar'>\r\n        <NavLink route='/' iconName='homeicon' linkName='Home' />\r\n        <NavLink route='/Projects' iconName='projectsicon' linkName='Projects' />\r\n        <NavLink route='/AboutMe' iconName='aboutmeicon' linkName='About Me' />\r\n        <NavLink route='/Contact' iconName='contacticon' linkName='Contact' />\r\n    </div>);\r\n}\r\n\r\nexport default NavBar;","import React from 'react';\r\n\r\nconst Projects = () => {\r\n    return (<div>\r\n        <div className='TopBar' style={\r\n            {backgroundImage: `url(${require(`./common/images/backgroundprojects.jpg`)})`}\r\n        }>\r\n            <div className='TopBarOverlay'>\r\n                <h1>The Projects Page</h1>\r\n            </div>\r\n        </div>\r\n        <div className='Content'>\r\n            <h1>Projects:</h1>\r\n            <div>\r\n                Blah blah projects blah blah blah\r\n            </div>\r\n        </div>\r\n    </div>);\r\n}\r\n\r\nexport default Projects;","import React from 'react';\r\nimport { Route, Switch, Redirect } from 'react-router-dom';\r\n\r\nimport Home from './Home';\r\nimport NotFound from './NotFound';\r\nimport NavBar from './NavBar';\r\nimport Projects from './Projects';\r\n\r\nimport './App.css';\r\n\r\nclass App extends React.Component {\r\n  render() {\r\n    return (\r\n        <div className='App'>\r\n          <div className='NavigableContent'>\r\n            <Switch>\r\n              <Route exact path='/' component={Home} />\r\n              <Route path='/Projects' component={Projects} />\r\n              <Route path='/not-found' component={NotFound} />\r\n              <Route path='/:path' render={() => <Redirect to='/not-found'/>} />\r\n            </Switch>\r\n          </div>\r\n          <NavBar />\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { HashRouter as Router } from 'react-router-dom';\r\nimport './index.css';\r\nimport App from './frontend/App';\r\nimport * as serviceWorker from './frontend/serviceWorker';\r\n\r\nReactDOM.render(<Router basename={process.env.PUBLIC_URL}><App /></Router>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}